/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../node_modules/css-loader/dist/cjs.js!./styles/main.css":
/*!****************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!./styles/main.css ***!
  \****************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"../node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(function(i){return i[1]});\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":root {\\n    --basedark: #718AAD;\\n    --baselight: #A2C7FA;\\n    --additdark: #4174BB;\\n    --additlight: #579BFA;\\n    --extradark: #50617A;\\n}\\n\\n/*MAIN */\\nhtml {\\n    overflow-y: hidden;\\n}\\n\\nhtml, body, #_main-container {\\n    height: 100%;\\n    width: 100%;\\n    font-family: arial;\\n    display: flex;\\n}\\n\\n#_main-container {\\n    display: flex;\\n    align-items: stretch;\\n    background: cornflowerblue;\\n    flex-grow: 1;\\n}\\n\\n/*COMMON ELEMENTS */\\n\\nbutton {\\n    cursor: pointer;\\n}\\n\\nbutton > * {\\n  pointer-events: none;\\n}\\n\\ninput, select, textarea {\\n    outline: none;\\n}\\n\\ninput:focus-within,\\nselect:focus-within,\\ntextarea:focus-within {\\n    outline: 1px solid var(--additdark); \\n    border: 2px solid rgba(255, 255, 255, 0);\\n    box-shadow: 0px 0px 2px 1px #00adff;\\n}\\n\\n.button-icon24 {\\n    align-items: center;\\n    justify-content: center;\\n    border: none;\\n    transition: 0.3s;\\n    padding: 0;\\n    background-color: #ffffff00;\\n    margin: 2px;\\n}\\n\\n.button-icon12 {\\n    align-items: center;\\n    justify-content: center;\\n    border: none;\\n    transition: 0.3s;\\n    padding: 0;\\n    background-color: #ffffff00;\\n}\\n\\n.button-icon24:focus {\\n    outline: none;\\n    border: 1px dashed var(--baselight);\\n    }\\n\\n.button-icon24:active {\\n    outline: none;\\n    border: 1px dashed aliceblue;\\n}\\n\\n.svg-icon {\\n  width: 24px;\\n  height: 24px;\\n}\\n\\n.svg-icon12 {\\n  width: 12px;\\n  height: 12px;\\n}\\n\\n.svg-icon path,\\n.svg-icon polygon,\\n.svg-icon rect {\\n  fill: var(--additdark);\\n}\\n\\n.svg-icon12 circle, .svg-icon circle  {\\n  stroke: #4691f6;\\n  stroke-width: 1;\\n}\\n\\n/*CALENDAR*/\\n#c-calendar {\\n    max-width: 336px;\\n    flex-grow: 0;\\n    display: flex;\\n    flex-direction: column;\\n    background-color: var(--additdark);\\n}\\n\\n#c-topbar {\\n    flex-basis: 48px;\\n    background-color: var(--additlight);\\n    display: flex;\\n    justify-content: space-between;\\n}\\n\\n#c-daysFrame {\\n    height: 288px;\\n    width: 336px;\\n    display: flex;\\n    flex-wrap: wrap;\\n    margin: auto;\\n    background-color: #a85e5e;\\n}\\n\\n/*DAY BUTTON*/\\n.c-daysFrame__dayButton {\\n    height: 48px; \\n    width: 48px;  \\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    color: #ffffff;\\n    border: #579bfa9e solid 1px;\\n    transition: 0.3s;\\n}\\n\\n.c-daysFrame__dayButton:hover {\\n    background-color: var(--additlight);\\n    border-color: var(--baselight);\\n    box-shadow: inset 0px 0px 6px 0px var(--baselight);\\n}\\n\\n.c-daysFrame__dayButton:focus {\\n    outline: none;\\n    border: 1px solid var(--baselight);\\n    box-shadow: 1px 1px 1px 1px aliceblue;\\n}\\n\\n.c-daysFrame__dayButton:active {\\n}\\n\\n.--no-tasks {\\n    background-color: var(--additdark);\\n}\\n.--tasks-done {\\n    background-color: #5689d6;\\n}\\n.--got-tasks {\\n    background-color: #355f9e;\\n}\\n\\n.--out-month {\\n    color: #a2c0eb;\\n}\\n\\n.c-topbar__swtcMonthBt {\\n    height: 43px;\\n    width: 45px;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    transition: 0.5s;\\n}\\n\\n.c-topbar__swtcMonthBt:hover path {\\n    fill: var(--baselight);\\n    transition: 0.2s;\\n}\\n\\n#c-topbar__monthLabel {\\n    display: flex;\\n    align-items: center;\\n    color: aliceblue;\\n}\\n\\n/*TASK PANEL*/\\n#tp-taskpanel {\\n    flex-grow: 1;\\n    background: var(--additdark);\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\n#tp-topbar {\\n    min-height: 48px;\\n    background-color: var(--additlight);\\n    display: flex;\\n    justify-content: space-between;\\n    color: aliceblue;\\n}\\n\\n#tp-dateLabel {\\n    align-self: center;\\n    margin-left: 4rem;\\n}\\n\\n#tp-createTaskBt {\\n    height: 44px;\\n    width: 44px;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    transition: 0.5s;\\n    background-color: var(--additlight);\\n    margin-right: 20px;\\n}\\n\\n#tp-createTaskBt .svg-icon {\\n    width:36px;\\n    height: 36px;\\n}\\n\\n#tp-createTaskBt\\n    .svg-icon path,\\n    .svg-icon polygon,\\n    .svg-icon rect,\\n    .svg-icon circle {\\n    stroke: var(--baselight);\\n    transition: 0.2s;\\n}\\n\\n#tp-createTaskBt:hover > \\n    .svg-icon path,\\n    .svg-icon polygon,\\n    .svg-icon rect,\\n    .svg-icon circle{\\n    stroke: #fffedf;\\n}\\n\\n/*container where located taskitelms*/\\n#tp-taskList {\\n    flex-basis: 30%;\\n    flex-grow: 1;\\n    display: flex;\\n    flex-direction: column;\\n    margin: 10px 5px;\\n    overflow-y: scroll;\\n    text-align: center;\\n    color: #bfc9d2;\\n    border-left: 1px solid var(--basedark);\\n}\\n\\n/*single task item*/\\n.tp-taskitem {\\n    background-color: var(--baselight);\\n    border-radius: 2px;\\n    transition: 0.2s;\\n    border: solid 1px var(--additlight);\\n    margin-bottom: 5px;\\n    margin-left: 5px;\\n    flex-basis: 56px;\\n    flex-shrink: 0;\\n    display: flex;\\n    align-items: center;\\n    text-align: initial;\\n    color: black;\\n}\\n\\n.tp-taskitem:hover {\\n    border-color: var(--baselight);\\n    background-color: #dbebff;\\n}\\n\\n.tp-taskitem \\n.button-icon24:active, .button-icon24:focus {\\n    border: 1px dashed var(--extradark);\\n}\\n\\n.tp-taskitem .button-icon12:focus {\\n    border: 1px dashed var(--extradark);\\n    background: rgb(0, 255, 13);   \\n}\\n\\n.tp-taskCheckout {\\n    margin-left: 5px;\\n}\\n\\n/*section with task-settings, task-title and task-description*/\\n.tp-taskitemMain {\\n    flex-grow: 1;\\n    display: flex;\\n    flex-direction: column;\\n    padding: 0px 5px;\\n}\\n\\n.tp-taskitemTitle {\\n    overflow: hidden;\\n    overflow-wrap: anywhere;\\n    flex-grow: 1;\\n    font-size: 14px;\\n    margin: 3px;\\n}\\n\\n.tp-taskitemDescr {\\n    border-radius: 2px;\\n    background-color: #c9d2ef;\\n    overflow-wrap: anywhere;\\n    flex-grow: 1;\\n    font-size: 14px;\\n    margin: 3px;\\n}\\n\\n.ti-SaveTaskBt:hover path {\\n    fill: #2aa9c6;\\n}\\n\\n.ti-CloseEditorBt:hover path {\\n    fill: #5c698f;\\n}\\n\\n/*buttons, that displais in to the right of tp-taskitem when it is not unfold*/\\n.tp-taskitemRightBtns * {\\n    display: flex;\\n    flex-direction: column;\\n    transition: 0.2s;\\n}\\n\\n.tp-taskitemRightBtns .button-icon24 {\\n    display: none\\n}\\n\\n.tp-RightBtnsDelTask:hover path {\\n    fill:crimson;\\n}\\n\\n.tp-RightBtnsEditTask:hover path{\\n    fill: var(--baselight);\\n    fill: #202e5f;\\n}\\n\\n.tp-taskitem:hover > .tp-taskitemRightBtns .button-icon24 {\\n    display: flex;\\n}\\n\\n/*container for the 'save changes' and the 'close task redactor' buttons*/\\n.tp-taskitemSaveClose{\\n    align-self: flex-end;\\n    margin-top: 3px;\\n}\\n\\n.tp-taskTimeSettings {\\n    display: flex;\\n    justify-content: space-between;\\n    font-size: 14px;\\n}\\n\\n/*container for wraping a task-item settings element and its label*/\\n.tp-SettingsElement {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: space-evenly;\\n    font-size: 14px;\\n    margin-bottom: 5px;\\n}\\n\\n.tp-SettingsElement label {\\n    margin-bottom: 5px;\\n    font-size: 14px;\\n}\\n\\n.tp-taskFilesArea {\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-between;\\n    padding: 5px;\\n    border: solid 1px var(--extradark);\\n    border-radius: 2px;\\n    margin-bottom: 5px;\\n}\\n\\n.tp-taskFileSet {\\n    display: flex;\\n    justify-content: start;\\n    flex-wrap: wrap;\\n    font-size: 12;\\n}\\n\\n.tp-taskFile {\\n    display: flex;\\n    align-items: center;\\n    text-decoration: underline;\\n    cursor: pointer;\\n    margin-right: 5px;\\n    background-color: aliceblue;\\n    border-radius: 4px;\\n    padding: 3px;\\n    max-height: 14px;\\n}\\n\\n.tp-taskFileAdd {\\n}\\n\\n.tp-taskFile\\n.svg-icon12 path,\\n.svg-icon12 polygon,\\n.svg-icon12 rect,\\n.svg-icon12 circle,\\n.tp-taskFileDelete {\\n  fill: red;\\n}\\n\\n\\n\\n\", \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack:///./styles/main.css?../node_modules/css-loader/dist/cjs.js");

/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/api.js":
/*!******************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/api.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join(\"\");\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \"\"]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\n//# sourceURL=webpack:///../node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./styles/main.css":
/*!*************************!*\
  !*** ./styles/main.css ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_main_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!./main.css */ \"../node_modules/css-loader/dist/cjs.js!./styles/main.css\");\n\n            \n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_main_css__WEBPACK_IMPORTED_MODULE_1__.default, options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_main_css__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});\n\n//# sourceURL=webpack:///./styles/main.css?");

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : 0;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack:///../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./cacheservice.js":
/*!*************************!*\
  !*** ./cacheservice.js ***!
  \*************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {copyObject} = __webpack_require__(/*! ./copy */ \"./copy.js\")\n\n\nclass CacheService {\n    constructor(transportService) {\n        // class to interact with the server\n        this.transportService = transportService\n        // current date\n        this.today = new Date()\n        // the date containing month of the current calendar page\n        this.pageDate = this.today\n        // array of the Date() objects of the current calendar page\n        this.datesArray = []\n        // TaskObject()s for the dates the current calendar page\n        this.tasksArray = []\n    }\n\n    setPageDate(date) {\n        console.log('%c requesting data for changing page date: ' +\n                    `${this.pageDate}`, 'color: cornflowerblue')\n\n        return new Promise ((resolve, reject) => {\n            this.transportService.getMonthPack(date)\n                .then(pack => {\n                    this.pageDate = date\n                    this.datesArray = DatesArray.from(pack.dates)\n                    this.tasksArray = TaskArray.from(pack.tasks)\n\n                    console.log('%c requested data successfully received ' + \n                                'from the server', 'color: yellowgreen')\n                    console.log(this.tasksArray)\n                    resolve()\n                })\n                .catch(err => {\n                    console.log('%c Failed to receive data for changing ' + \n                                `page date: ${this.pageDate}`, 'color: crimson')\n                    reject(err)\n                })\n        })\n    }\n\n    // setPageDate(date) {\n    //     return new Promise((onResolve, onReject) => {\n    //         this._setPageDate(date)\n    //         onResolve()\n    //     })\n    // }\n\n\n    createTask(newTask) {\n        return this.transportService.addNewTask(newTask)\n        .then(() => {\n            console.log('%c the task successfully added to DB', 'color: yellowgreen')\n        })\n        .then(() => this.refreshData())\n        .catch(err => {\n            console.error('fail to add the task')\n            throw err\n        })\n    }\n    \n    editTask(changedFields) {\n        return this.transportService.changeTask(changedFields)\n        .then(() => {\n            console.log('%c the task successfully changed at DB', 'color: yellowgreen')\n        })\n        .then(() => this.refreshData())\n        .catch(err => {\n            console.error('fail to edit the task')\n            throw err\n        })\n    }\n    \n    deleteTask(deletedTask) {\n        return this.transportService.deleteTask(deletedTask)\n        .then(() => {\n            console.log('%c the task was successfully deleted from DB', 'color: yellowgreen')\n            let taskIndex = this.tasksArray.indexOf(deletedTask)\n            this.tasksArray.splice(taskIndex, 1)\n        })\n        .catch(err => {\n            console.error('failed to delete the task')\n            throw err\n        })\n    }\n    \n    checkUncheckTask(checkingTask) {\n        return this.transportService.checkUncheckTask(checkingTask)\n        .then(() => {\n            console.log('%c information about the task completion was changed on DB', 'color: yellowgreen')\n            let unchangedTask\n            for(let task of this.tasksArray) {\n                if(task.id === checkingTask.id && task.date === checkingTask.date) {\n                    task.completion = checkingTask.completion\n                    break\n                }\n            }\n        })\n        .catch(err => {\n            console.error('failed to change information about the task completion on DB')\n            throw err\n        })\n    }\n    \n    // methods to move to another places\n    checkDailyTasks(date) {\n        throw ('move this method away from this class!') // TODO: fix it!\n        let dateString = DateFormater.formatForBackend(date)\n        let haveDoneTasks = false\n        \n        for (let task of this.tasksArray) {\n            if (task.date === dateString) {\n                if (!task.completion) {\n                    return 'got tasks'\n                } else {\n                    haveDoneTasks = true\n                }\n            }\n        }\n        if (haveDoneTasks) {\n            return 'tasks done'\n        } else {\n            return 'no tasks'\n        }\n    }\n    getDailyTasks(date){\n        throw ('move this method away from this class!') // TODO: fix it!\n        let dateString = DateFormater.formatForBackend(date)\n        let dailyTasks = []\n        \n        for(let task of this.tasksArray) {\n            if (dateString === task.date){\n                dailyTasks.push(task)\n            }\n        }\n        return dailyTasks\n    }\n    isDateInMonth(date) {\n        throw ('move this method away from this class!') // TODO: fix it!\n        return date.getMonth() === this.pageDate.getMonth()\n    }\n\n    // deprecated\n    get taskList() {\n        throw 'this property renamed to this.tasksArray'\n    }\n    get pageDaysArr() {\n        throw 'this property renamed to this.datesArray'\n    }\n    _requestDataPack(...args) {\n        throw 'this method renamed to this._requestMonthPack()'\n    }\n    reqChangeDate(...args) {\n        throw 'this method renamed to this.setDate()'\n    }\n    refreshData() {\n        throw \"method deprecated - use setDate() instead it\"\n    }\n\n}\n\n\n/**Self-validating object of the user's task.\n * Accepts an object from the server, where fields are parameters of\n * a user task, checks them, throws an error if the data is not\n * consistent (there are mutually exclusive fields, etc.)\n * @param  {object} object\n */\nclass TaskObject {\n    constructor(object) {\n        this._object = copyObject(object)\n\n        // Task identifier\n        this.id = object.id\n        // Current date of the task. The task might be created on another\n        // date and repeated according to this.interval parameter.\n        // Therefore this.date and this.init_date can differ)\n        this.date = object.date\n        // Date when the task was created by user\n        this.init_date = object.init_date\n        // User-defined task name \n        this.title = object.title\n        // user-defined description of the task \n        this.description = object.description\n        // date and time when a user marked the task as completed\n        this.completion = object.completion\n        // Parameter which represents whether the task should be repeated\n        // according to certain interval of time or not\n        this.interval = object.interval\n        // a value indicating whether the task should be rescheduled to the\n        // next date if it was not completed on time (shifted if not completed)\n        this.autoshift = object.autoshift\n        // File, attached to the user-created task (text document,\n        // spreadsheet, etc.). File represented as a link to the place\n        // where the task stored.\n        this.files = object.files\n    }\n\n    set id(newValue) {\n        // TODO: need custom error\n        if (!newValue) {\n            throw 'task should have id'\n        } else if (Math.ceil(newValue) != newValue) {\n            throw 'task id should be an integer'\n        } else if (newValue < 1) {\n            throw 'task id should be >= 1'\n        } else {\n            this._object.id = newValue\n        }\n    }\n\n    get id() {\n        return this._object.id\n    }\n    \n    set date(newValue) {\n        try {\n            this._object.date = toDateField(newValue)\n        } catch(err) {\n            throw TypeError(`Invalid value of date: ${err.message}`)\n        }\n    }\n    \n    get date() {\n        return this._object.date\n    }\n\n    set init_date(newValue) {\n        try {\n            this._object.init_date = toDateField(newValue)\n        } catch(err) {\n            throw TypeError(`Invalid value of init_date: ${err.message}`)\n        }\n    }\n\n    get init_date() {\n        return this._object.init_date\n    }\n \n    set title(newValue) {\n        this._object.title = newValue\n    }\n\n    get title() {\n        return this._object.title\n    }\n\n    set description(newValue) {\n        this._object.description = newValue\n    }\n\n    get description() {\n        return this._object.description\n    }\n\n    set completion(newValue) {\n        if (newValue === false) {\n            this._object.completion = newValue\n        } else {\n            try {\n                this._object.completion = toDateField(newValue)\n            } catch(err) {\n                throw TypeError(`Invalid value of completion: ${err.message}`)\n            } \n        }\n    }\n\n    get completion() {\n        return this._object.completion\n    }\n\n    set interval(newValue) {\n        if (newValue === 'no' || newValue === false) {\n            this._object.interval = newValue\n        }\n        else if (!this._object.autoshift) {\n            this._object.interval = newValue\n        } else {\n            throw 'cannot assign interval to the task ' + \n                  'where exists autoshift value'\n        } \n    }\n\n    get interval() {\n        return this._object.interval\n    }\n\n    set autoshift(newValue) {\n        if (newValue === false) {\n            this._object.autoshift = newValue\n        } else if (this._object.interval === 'no' || !this._object.interval) {\n            this._object.autoshift = newValue\n        } else {\n            throw ('cannot assign autoshift to the ' + \n                   'task where exists interval value')\n        }\n    }\n\n    get autoshift() {\n        return this._object.autoshift\n    }\n\n    set files(newValue) {\n        // TODO: files attaching\n        this._object.files = newValue\n    }\n\n    get files() {\n        return this._object.files\n    }\n\n    get object() {\n        let objectToReturn = copyObject(this._object)\n        for (let key of Object.keys(objectToReturn)) {\n            if (objectToReturn[key] instanceof Date) {\n                objectToReturn[key] = toProperISOString(\n                    objectToReturn[key]\n                )\n            }\n        }\n        return objectToReturn\n    }\n\n    static getEmpty(definedValues) {\n        let emptyTaskObj = {\n            id: undefined,\n            date: undefined,\n            init_date: undefined,\n            title: '',\n            description: '',\n            completion: false,\n            interval: 'no',\n            autoshift: false,\n            files: [],\n        }\n        if (definedValues) {\n            Object.assign(emptyTaskObj, definedValues)\n        }\n        return emptyTaskObj\n    }\n}\n\n\n/**\n * Wrapper for Array to handle TaskObject-s inside it. */\nclass TaskArray extends Array {\n    constructor(...args) {\n        super(...args)\n        this._convertToTaskObjects(this)\n    }\n    \n    static from(arrayLike, ...args) {\n        let result = super.from(arrayLike, t => {\n            if (t instanceof TaskObject) {\n                return t\n            } else {\n                return new TaskObject(t)\n            }\n        })\n        if (args) {\n            return super.from(result, ...args)\n        } else {\n            return result\n        }\n    }\n    /**\n     * ->  Does this array contain tasks for the specified date?\n     * <-  'got tasks' | 'tasks done' |' no tasks' \n     * @param  {Date} date\n     */\n    checkDailyTasks(date) {\n        let haveDoneTasks = false\n        for (let task of this) {\n            if (arraysEquals(\n                [task.date.getDate(), task.date.getMonth()],\n                [date.getDate(), date.getMonth()]\n            )) {\n                if (!task.completion) {\n                    return 'got tasks'\n                } else {\n                    haveDoneTasks = true\n                }  \n            }\n        }\n        if (haveDoneTasks) {\n            return 'tasks done'\n        } else {\n            return 'no tasks'\n        }\n        \n        \n    }\n    \n    /**\n     * Get TaskObject-s where TaskObject.date equals @param date\n     * @param  {Date} date\n     */\n    getDailyTasks(date){\n        let dailyTasks = []\n        \n        for(let task of this) {\n            if (date.getDate() === task.date.getDate()){\n                dailyTasks.push(task)\n            }\n        }\n        return dailyTasks\n    }\n\n    _convertToTaskObjects(array) {\n        for (let key of array.keys()) {\n            if (this.key instanceof TaskObject) {\n                continue\n            }    \n            this[key] = new TaskObject(this[key])\n        }\n    }\n\n}\n\n\nclass DatesArray extends Array {\n    constructor(...args) {\n        super(...args)\n        this._convertStringsToDates(this)\n    }\n\n    static from(arrayLike, ...args) {\n        let result = super.from(arrayLike, d => new Date(d))\n        if (args) {\n            return super.from(result, ...args)\n        } else {\n            return result\n        }\n    }\n    \n    _convertStringsToDates(array) {\n        for (let key of array.keys()) {\n                this[key] = new Date(this[key])\n        }\n    }\n}\n\n\n// -------------------Other--------------------\n/**\n * Function to make a Date from given value, if it isn't\n * already type of Date.\n */\nfunction toDateField(date) {\n    if (date instanceof Date) {\n        return date\n    } else if (typeof date === 'string'){\n        const dateObject = new Date(date)\n        \n        if (isNaN(dateObject.getDate())) {\n            throw new TypeError ('cannot make valid Date object ' +\n                                 `from \"${date}\"`)\n        } else {\n            return dateObject\n        }\n    }\n    else {\n        throw new TypeError ('cannot make valid Date object ' +\n                             `from \"${date}\" - only Date objects ` +\n                             'and strings are allowed as args')\n    }\n}\n\n\n/**\n * Simple function to compare two arrays\n * @param  {Array} a - first array\n * @param  {Array} b - second array\n */\nfunction arraysEquals(a, b) {\n    return (a.length === b.length\n        && a.every((v, i) => v === b[i]))\n}\n\n\n/** Make ISO string with trailing \"+00:00\" for a Date() object.\n * (e.g.'2021-02-01T00:00:00+00:00' instead of '2021-02-01T00:00:00Z'\n * as in the standard Date.toISOString() method). \n * @param  {} dateObj\n */\nfunction toProperISOString(dateObj) {\n        let jsISOString = dateObj.toISOString()\n        let properISOString = jsISOString.replace('Z','+00:00')\n        return properISOString\n}\n\n\n\nmodule.exports = {\n    CacheService, TaskObject, TaskArray, DatesArray, copyObject, toDateField\n}\n\n\n//# sourceURL=webpack:///./cacheservice.js?");

/***/ }),

/***/ "./copy.js":
/*!*****************!*\
  !*** ./copy.js ***!
  \*****************/
/***/ ((module) => {

eval("function copyObject(object) {\n    let newCopy = {}\n    Object.assign(newCopy, object)\n    return newCopy\n}\n\nmodule.exports = {copyObject}\n\n//# sourceURL=webpack:///./copy.js?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _styles_main_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/main.css */ \"./styles/main.css\");\n\nconst {Widget} = __webpack_require__(/*! ./widget */ \"./widget.js\")\nconst {DayButton, Calendar} = __webpack_require__(/*! ./widget.calendar.js */ \"./widget.calendar.js\")\nconst {TaskPanel} = __webpack_require__(/*! ./widget.taskpanel.js */ \"./widget.taskpanel.js\")\nconst {copyObject} = __webpack_require__(/*! ./copy */ \"./copy.js\")\nconst {CacheService, TaskObject} = __webpack_require__(/*! ./cacheservice */ \"./cacheservice.js\")\nconst {TransportService} = __webpack_require__(/*! ./transportservice */ \"./transportservice.js\")\nconst {IconButton24} = __webpack_require__(/*! ./widget.common.js */ \"./widget.common.js\")\nconst {svgPaths} = __webpack_require__(/*! ./svgpaths.js */ \"./svgpaths.js\")\n\n\nconsole.log('I am the entry point')\n\n// Entire app launch initializations.\nconst _mainContainer = document.getElementById('_main-container')\nconst transportService = new TransportService()\nconst cacheService = new CacheService(transportService)\nlet calendar\nlet taskPanel\n    \ncacheService.setPageDate(cacheService.today)\n    .then( () => {\n        calendar = new Calendar(_mainContainer, cacheService)\n        taskPanel = new TaskPanel(_mainContainer, cacheService)\n        calendar.build()\n        taskPanel.build()\n        \n    })\n    .catch( err => {\n        console.error(err)\n        alert(err.errorTraceback)\n    })\n    .then(() => {\n\n// Make these accessible from browser dev tools console\nwindow.Widget = Widget\nwindow._mainContainer = _mainContainer\nwindow.copyObject = copyObject\nwindow.TaskObject = TaskObject\nwindow.TransportService = TransportService\nwindow.CacheService = CacheService\nwindow.DayButton = DayButton\nwindow.Calendar = Calendar\nwindow.IconButton24 = IconButton24\nwindow.svgPaths = svgPaths\nwindow.TaskPanel = TaskPanel\n\n\nwindow.calendar = calendar\nwindow.taskPanel = taskPanel\n\n})\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./svgpaths.js":
/*!*********************!*\
  !*** ./svgpaths.js ***!
  \*********************/
/***/ ((module) => {

eval("svgPaths = {\n    saveTask: `<svg class=\"svg-icon\" viewBox=\"0 0 20 20\">\n               <path fill=\"none\" d=\"M9.917,0.875c-5.086,0-9.208,4.123-9.208,9.208c0,5.086,4.123,9.208,9.208,9.208s9.208-4.122,9.208-9.208\n               C19.125,4.998,15.003,0.875,9.917,0.875z M9.917,18.141c-4.451,0-8.058-3.607-8.058-8.058s3.607-8.057,8.058-8.057\n               c4.449,0,8.057,3.607,8.057,8.057S14.366,18.141,9.917,18.141z M13.851,6.794l-5.373,5.372L5.984,9.672\n               c-0.219-0.219-0.575-0.219-0.795,0c-0.219,0.22-0.219,0.575,0,0.794l2.823,2.823c0.02,0.028,0.031,0.059,0.055,0.083\n               c0.113,0.113,0.263,0.166,0.411,0.162c0.148,0.004,0.298-0.049,0.411-0.162c0.024-0.024,0.036-0.055,0.055-0.083l5.701-5.7\n               c0.219-0.219,0.219-0.575,0-0.794C14.425,6.575,14.069,6.575,13.851,6.794z\"></path>\n               </svg>`,\n    \n    pointLeft: `<svg class=\"svg-icon\" viewBox=\"0 0 20 20\">\n                <path fill=\"none\" d=\"M8.388,10.049l4.76-4.873c0.303-0.31,0.297-0.804-0.012-1.105c-0.309-0.304-0.803-0.293-1.105,0.012L6.726,9.516c-0.303,0.31-0.296,0.805,0.012,1.105l5.433,5.307c0.152,0.148,0.35,0.223,0.547,0.223c0.203,0,0.406-0.08,0.559-0.236c0.303-0.309,0.295-0.803-0.012-1.104L8.388,10.049z\"></path>\n                </svg>`,\n    \n    pointRight: `<svg class=\"svg-icon\" viewBox=\"0 0 20 20\">\n                 <path fill=\"none\" d=\"M11.611,10.049l-4.76-4.873c-0.303-0.31-0.297-0.804,0.012-1.105c0.309-0.304,0.803-0.293,1.105,0.012l5.306,5.433c0.304,0.31,0.296,0.805-0.012,1.105L7.83,15.928c-0.152,0.148-0.35,0.223-0.547,0.223c-0.203,0-0.406-0.08-0.559-0.236c-0.303-0.309-0.295-0.803,0.012-1.104L11.611,10.049z\"></path>\n                 </svg>`,\n    \n    addTask: `<svg class=\"svg-icon\" viewBox=\"0 0 20 20\">\n              <path fill=\"none\" d=\"M13.388,9.624h-3.011v-3.01c0-0.208-0.168-0.377-0.376-0.377S9.624,6.405,9.624,6.613v3.01H6.613c-0.208,0-0.376,0.168-0.376,0.376s0.168,0.376,0.376,0.376h3.011v3.01c0,0.208,0.168,0.378,0.376,0.378s0.376-0.17,0.376-0.378v-3.01h3.011c0.207,0,0.377-0.168,0.377-0.376S13.595,9.624,13.388,9.624z M10,1.344c-4.781,0-8.656,3.875-8.656,8.656c0,4.781,3.875,8.656,8.656,8.656c4.781,0,8.656-3.875,8.656-8.656C18.656,5.219,14.781,1.344,10,1.344z M10,17.903c-4.365,0-7.904-3.538-7.904-7.903S5.635,2.096,10,2.096S17.903,5.635,17.903,10S14.365,17.903,10,17.903z\"></path>\n              </svg>`,\n\n    editTask: `<svg class=\"svg-icon\" viewBox=\"0 0 20 20\">\n               <path d=\"M10,2.172c-4.324,0-7.828,3.504-7.828,7.828S5.676,17.828,10,17.828c4.324,0,7.828-3.504,7.828-7.828S14.324,2.172,10,2.172M10,17.004c-3.863,0-7.004-3.141-7.004-7.003S6.137,2.997,10,2.997c3.862,0,7.004,3.141,7.004,7.004S13.862,17.004,10,17.004M10,8.559c-0.795,0-1.442,0.646-1.442,1.442S9.205,11.443,10,11.443s1.441-0.647,1.441-1.443S10.795,8.559,10,8.559 M10,10.619c-0.34,0-0.618-0.278-0.618-0.618S9.66,9.382,10,9.382S10.618,9.661,10.618,10S10.34,10.619,10,10.619 M14.12,8.559c-0.795,0-1.442,0.646-1.442,1.442s0.647,1.443,1.442,1.443s1.442-0.647,1.442-1.443S14.915,8.559,14.12,8.559 M14.12,10.619c-0.34,0-0.618-0.278-0.618-0.618s0.278-0.618,0.618-0.618S14.738,9.661,14.738,10S14.46,10.619,14.12,10.619 M5.88,8.559c-0.795,0-1.442,0.646-1.442,1.442s0.646,1.443,1.442,1.443S7.322,10.796,7.322,10S6.675,8.559,5.88,8.559 M5.88,10.619c-0.34,0-0.618-0.278-0.618-0.618S5.54,9.382,5.88,9.382S6.498,9.661,6.498,10S6.22,10.619,5.88,10.619\"></path>\n               </svg>`,\n    \n    deleteTask: `<svg class=\"svg-icon\" viewBox=\"0 0 20 20\">\n                 <path d=\"M17.114,3.923h-4.589V2.427c0-0.252-0.207-0.459-0.46-0.459H7.935c-0.252,0-0.459,0.207-0.459,0.459v1.496h-4.59c-0.252,0-0.459,0.205-0.459,0.459c0,0.252,0.207,0.459,0.459,0.459h1.51v12.732c0,0.252,0.207,0.459,0.459,0.459h10.29c0.254,0,0.459-0.207,0.459-0.459V4.841h1.511c0.252,0,0.459-0.207,0.459-0.459C17.573,4.127,17.366,3.923,17.114,3.923M8.394,2.886h3.214v0.918H8.394V2.886z M14.686,17.114H5.314V4.841h9.372V17.114z M12.525,7.306v7.344c0,0.252-0.207,0.459-0.46,0.459s-0.458-0.207-0.458-0.459V7.306c0-0.254,0.205-0.459,0.458-0.459S12.525,7.051,12.525,7.306M8.394,7.306v7.344c0,0.252-0.207,0.459-0.459,0.459s-0.459-0.207-0.459-0.459V7.306c0-0.254,0.207-0.459,0.459-0.459S8.394,7.051,8.394,7.306\"></path>\n                 </svg>`,\n\n    closeEditor: `<svg class=\"svg-icon\" viewBox=\"0 0 20 20\">\n                <path fill=\"none\" d=\"M13.864,6.136c-0.22-0.219-0.576-0.219-0.795,0L10,9.206l-3.07-3.07c-0.219-0.219-0.575-0.219-0.795,0\n                    c-0.219,0.22-0.219,0.576,0,0.795L9.205,10l-3.07,3.07c-0.219,0.219-0.219,0.574,0,0.794c0.22,0.22,0.576,0.22,0.795,0L10,10.795\n                    l3.069,3.069c0.219,0.22,0.575,0.22,0.795,0c0.219-0.22,0.219-0.575,0-0.794L10.794,10l3.07-3.07\n                    C14.083,6.711,14.083,6.355,13.864,6.136z M10,0.792c-5.086,0-9.208,4.123-9.208,9.208c0,5.085,4.123,9.208,9.208,9.208\n                    s9.208-4.122,9.208-9.208C19.208,4.915,15.086,0.792,10,0.792z M10,18.058c-4.451,0-8.057-3.607-8.057-8.057\n                    c0-4.451,3.606-8.057,8.057-8.057c4.449,0,8.058,3.606,8.058,8.057C18.058,14.45,14.449,18.058,10,18.058z\"></path>\n                </svg>`,\n}\n\n\nmodule.exports = {svgPaths}\n\n\n//# sourceURL=webpack:///./svgpaths.js?");

/***/ }),

/***/ "./transportservice.js":
/*!*****************************!*\
  !*** ./transportservice.js ***!
  \*****************************/
/***/ ((module) => {

eval("const SERVER_URLs = {\n    base: 'http://127.0.0.1:8000/',\n    changeDate: '/taskmanager/getDatePack',\n    \n}\n\n\nclass TransportService {\n    constructor(serverURLs=SERVER_URLs) {\n        this.urls = serverURLs\n    }\n\n    /**\n     * Request from server JSON file consisting of: \n     * 1) list of all days in the month of specified date (as\n     * ISOStrings). List contains extra-days to make 6 full weeks and\n     * look as a pretty calendar (used in Calendar widget);\n     * 2) All user tasks for this month including repeated by specified\n     * time interval.\n     * @param  {Date} date\n     */\n    getMonthPack(date) {\n        let httpParamDate = date.toISOString().replace('Z', '+00:00')\n        \n        let url = new URL(this.urls.changeDate, this.urls.base)\n        url.searchParams.append('date', httpParamDate)\n        \n        return fetch(url)\n            .then(response => response.json())\n            .catch(err => {\n                console.error(err)\n                throw err\n            })\n    }\n}\n\n\nmodule.exports = {TransportService}\n\n\n//# sourceURL=webpack:///./transportservice.js?");

/***/ }),

/***/ "./widget.calendar.js":
/*!****************************!*\
  !*** ./widget.calendar.js ***!
  \****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {Widget} = __webpack_require__(/*! ./widget.js */ \"./widget.js\")\nconst {IconButton24} = __webpack_require__(/*! ./widget.common.js */ \"./widget.common.js\")\nconst {svgPaths} = __webpack_require__(/*! ./svgpaths.js */ \"./svgpaths.js\")\n\n\nclass Calendar extends Widget {\n    constructor (parent, cacheService) {\n        super(parent)\n        \n        this.id = 'c-calendar'\n        this.cacheService = cacheService\n        \n        this.date = this.cacheService.pageDate\n        this.daysArr = this.cacheService.datesArray\n\n        // Child widgets\n        this.childWidgets = [\n            this.Topbar = new Widget(this, {id: 'c-topbar'}),\n\n            this.DaysFrame = new Widget(this, {id: 'c-daysFrame'}),\n            \n            this.PrevMonthBtn = new IconButton24(this.Topbar, {\n                id: 'monthBack-bt', \n                onclick: this.toPrevMonth.bind(this),\n            }, svgPaths.pointLeft),\n            \n            this.MonthLabel = new Widget(this.Topbar, {\n                id: 'c-topbar__monthLabel',\n                // innerText: DateFormatter.makeMonthLabel(this.date)\n                innerText: this.date.getMonth() + '.' + this.date.getYear() \n            }),\n            \n            this.NextMonthBtn = new IconButton24(this.Topbar, {\n                id: 'monthForv-bt', \n                onclick: this.toNextMonth.bind(this),\n            }, svgPaths.pointRight),\n        ]\n\n        this.DayButtonArr = this.initDayButtons(this.DaysFrame, this.daysArr)\n\n        // some cosmetic appearance fixes\n        this.PrevMonthBtn.addCssClass('c-topbar__swtcMonthBt')\n        this.NextMonthBtn.addCssClass('c-topbar__swtcMonthBt')\n    }\n\n    build() {\n        super.build()\n        \n        this.childWidgets.forEach(ch => ch.build())\n        this.DayButtonArr.forEach(btn => btn.build())\n    }\n\n    initDayButtons(frame, daysArr) {\n        let array = []\n        for(let date of daysArr) {\n            let btn = new DayButton(frame, date, this.cacheService, 42) // TODO: fix task panel arg\n            array.push(btn)\n        }\n        return array\n    }\n    \n    configurateDayButtons(newDateList) {\n        let index = 0\n        for (let btn of this.DayButtonArr) {\n            btn.configurate(newDateList[index])\n            index += 1\n        }   \n    }\n\n    updDayButtonsStatus(){\n        this.DayButtonArr.forEach(bt => bt.updStatus())\n    }\n\n    reqChangeDate(newDate) {\n        this.cacheService.setPageDate(newDate)\n            .then(() => {\n                this.date = this.cacheService.pageDate\n                this.daysArr = this.cacheService.datesArray\n                this.configurateDayButtons(this.daysArr)\n                this.MonthLabel.element.innerText = this.date.getMonth() + '.' + this.date.getYear() \n            })\n            .catch(err => {\n                // TODO: proper error handling \n                console.log('error catched in the end-point')\n                throw err\n            })\n    }\n\n    toNextMonth() {\n        let newMonth, newYear\n        if (this.date.getMonth() === 11) {\n            newMonth = 0\n            newYear = this.date.getYear() + 1 + 1900\n        } else {\n            newMonth = this.date.getMonth() + 1\n            newYear = this.date.getYear() + 1900\n        }\n        \n        let newDate = new Date(newYear, newMonth) \n        this.reqChangeDate(resetTimezone(newDate))\n    }\n\n    toPrevMonth() {\n        let newMonth, newYear\n        if (this.date.getMonth() === 0) {\n            newMonth = 11\n            newYear = this.date.getYear() - 1 + 1900\n        } else {\n            newMonth = this.date.getMonth() - 1\n            newYear = this.date.getYear() + 1900\n        }\n\n        let newDate = new Date(newYear, newMonth) \n        this.reqChangeDate(resetTimezone(newDate))\n    }\n\n    refreshMonth() {\n        this.reqChangeDate(this.date)\n    }\n\n}\n\n\nclass DayButton extends Widget {\n    constructor(parent, date, cacheService, taskPanel) {\n        super(parent)\n        this.tag = 'button'\n        this.element = document.createElement(this.tag)\n        this.id = this.makeId('dBtn')\n        this.element.className = 'c-daysFrame__dayButton'\n        \n        this.cacheService = cacheService\n        this.taskPanel = taskPanel\n        this.date = date\n\n        this.options = {\n            onclick: this.boundSelf.bind(this),\n        }\n\n        this.configurate(this.date)\n    }\n\n    updStatus() {\n        let status = this.cacheService.tasksArray.checkDailyTasks(this.date)\n        let classList = this.element.classList  // shortcut\n\n        if (status === 'no tasks') {\n            classList.add('--no-tasks')\n            classList.remove('--tasks-done', '--got-tasks')\n        } else if (status === 'tasks done') {\n            classList.add('--tasks-done')\n            classList.remove('--no-tasks', '--got-tasks')\n        } else if (status === 'got tasks') {\n            classList.add('--got-tasks')\n            classList.remove('--no-tasks', '--tasks-done') \n        } else {\n            throw 'no such status: ' + status\n        }\n    }\n\n    configurate(newDate) {\n        this.date = newDate\n        this.element.innerText = newDate.getDate()\n        \n        this.updStatus()\n        if (this.date.getMonth() != this.cacheService.pageDate.getMonth()){\n            this.element.classList.add('--out-month')\n        } else {\n            this.element.classList.remove('--out-month')\n        } \n    }\n\n    reqChangeDate(newDate) {\n        this.date = newDate\n        this.configurate(newDate)\n    }\n\n    boundSelf(){\n        taskPanel.boundDayBt(this)\n    }\n\n}\n\nfunction resetTimezone(date) {\n    let timezoneOffset = date.getTimezoneOffset() * 60 * 1000\n    let newDate = new Date(date.getTime() - timezoneOffset)\n    return newDate\n}\n\n\nmodule.exports = {DayButton, Calendar}\n\n//# sourceURL=webpack:///./widget.calendar.js?");

/***/ }),

/***/ "./widget.common.js":
/*!**************************!*\
  !*** ./widget.common.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {Widget} = __webpack_require__(/*! ./widget */ \"./widget.js\")\n\n\nclass IconButton24 extends Widget {\n    constructor(parent, options={}, svgHTML) {\n        super(parent, options)\n        this.tag = 'button'\n        this.element = document.createElement(this.tag)\n        this.element.className = 'button-icon24'\n\n        this.SvgIcon = Widget.fromHTML(this, svgHTML)\n    }\n\n    build(){\n        super.build()\n        this.SvgIcon.build()\n        if(this.defaultOptions.onclick) {\n            this.element.onclick = this.defaultOptions.onclick\n        }\n        if (this.defaultOptions.context) {\n            this.element.context = this.defaultOptions.context\n        }\n    }\n}\n\nmodule.exports = {IconButton24}\n\n//# sourceURL=webpack:///./widget.common.js?");

/***/ }),

/***/ "./widget.js":
/*!*******************!*\
  !*** ./widget.js ***!
  \*******************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {copyObject} = __webpack_require__(/*! ./copy.js */ \"./copy.js\")\n/**\n* The base class for widget entity, that combine simple\n* html element and logic of its behavior with attached data \n* to provide this logic.\n* @param  {Widget} parent - where to place this \n* @param  {object} options={ } - options of HTML Element\n*/\nclass Widget {\n    constructor(parent, options={}) {\n        this._checkTypes(parent, options)\n\n        // Parent widget\n        this.parent = parent\n        \n        // HTML Element associated with this class instance \n        this.element = document.createElement(\n            options.tagName ? options.tagName : 'DIV'\n        )\n        // HTML Element attributes you may specify before initialization\n        this.options = options\n        // HTML id attribute and id of this class instance.\n        this.id = options.id ? options.id : this.makeId('w')\n        // Variable to keep available the parameters that were set during\n        // initialization of this.\n        this.defaultOptions = copyObject(options)\n\n        //                          Privates\n\n        // Flex, block, etc. Private parameter to use it in this.hide()\n        // and this.show() methods.\n        this._defaultDisplayMode\n    }\n    \n    set options(newOptions) {\n        delete newOptions.tagName\n        try {\n            Object.assign(this.element, newOptions)\n        } catch(err) {\n            console.error(`cannot assign given options ${newOptions} to the`\n                          + `HTML element of the Widget`)\n            throw err\n        }\n    }\n    \n    /**\n     * The alternative constructor, that takes as args parent `Widget`\n     * and raw html string and returns a new Widget object based on\n     * given html string.\n     * @param  {Widget} parent  -  where to place this \n     * @param  {string} rawHTML  -  e.g \"<div>example</div>\"\n     * @returns {Widget} Widget\n     */\n    static fromHTML(parent, rawHTML) {\n        let newElement = this.makeElementFromHTML(rawHTML)\n        let newWidget = new Widget(parent)\n        newWidget.element = newElement\n        return newWidget\n    }\n    \n    /**\n     * Creates HTML Element from a raw string.\n     * \n     * @param  {string} rawHTML  -  e.g \"<div>example</div>\"\n     */\n    static makeElementFromHTML(rawHTML) {\n        let parser = new DOMParser()\n        let newDoc = parser.parseFromString(rawHTML, 'text/html')\n        let element = newDoc.body.firstElementChild\n        return element\n    }\n\n    /**\n     * Places `this.element` inside the specified parent widget\n     * (renders it).\n     */\n    build() {\n        try {\n            this.element.id = this.id\n            let parentNode = document.getElementById(this.parent.id)\n            parentNode.insertAdjacentElement('beforeend', this.element)\n            this._defaultDisplayMode = this.element.style.display\n        } catch (err) {\n            console.error('cannot build Widget:', this)\n            throw(err)\n        }\n    }\n    \n    /**\n     * Is `this.element` already on the page?\n     */\n    isBuilded(){\n        if(document.getElementById(this.id)){\n            return true\n        } else {\n            return false\n        }\n    }\n\n    /**\n     * Make id for this instance from some random integers and \n     * the character which will be concatenated to this integers\n     * (may use to represent type of this `Widget`, for example).\n     * ```\n     * // Usage:\n     * > this.makeID('MyWidgetType')\n     * 'MyWidgetType14336'\n     * \n     * > this.makeID('w')\n     * 'w54023'\n     * ```\n     * @param  {string} typeChar  - \n     */\n    makeId(typeChar) {\n        let randInt = Math.floor(Math.random() * 99999)\n        return typeChar + randInt\n    }\n    \n    /**\n     * Removes HTML element of this `Widget` from the document.\n     * Can be restored via this.build() \n     */\n    remove() {\n        this.element.remove()\n    }\n\n    /**\n     * Set `this.element.style.display` to 'none' - hides im from the page\n     */\n    hide() {\n        if(this._defaultDisplayMode != 'none'){\n            let currentMode = this.element.style.display\n            this.element._defaultDisplayMode = currentMode\n        }\n        this.element.style.display = 'none'\n    }\n    \n    /**\n     * Sets this.element.style.display to the value, that was\n     * given during initialization of this Widget instance\n     */\n    show() {\n        this.element.style.display = this._defaultDisplayMode\n    }\n    \n    /**\n     * Make user unable to interact with this.element on the page\n     */\n    disable() {\n        this.element.disabled = true\n    }\n    \n    /**\n     * Make user able to interact with this.element on the page (if it was\n     * disabled)\n     */\n    enable() {\n        this.element.disabled = false\n    }\n\n    addCssClass(className) {\n        this.element.classList.add(className)\n    }\n\n    removeCssClass(className) {\n        this.element.classList.remove(className)\n    }\n    \n    /**\n     * Validate args of the class constructor.\n     * \n     * @param  {Widget} parent\n     * @param  {object} options\n     */\n    _checkTypes(parent, options) {\n        if (\n            !(parent instanceof Widget)\n            & (parent.id != '_main-container')\n        ) {\n            throw new TypeError('first argument (parent) should ' +\n                                'be an instance of Widget')\n        }\n    }\n}\n\n\nmodule.exports = {Widget}\n\n\n//# sourceURL=webpack:///./widget.js?");

/***/ }),

/***/ "./widget.taskpanel.js":
/*!*****************************!*\
  !*** ./widget.taskpanel.js ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {Widget} = __webpack_require__(/*! ./widget.js */ \"./widget.js\")\nconst {IconButton24} = __webpack_require__(/*! ./widget.common.js */ \"./widget.common.js\")\nconst {svgPaths} = __webpack_require__(/*! ./svgpaths.js */ \"./svgpaths.js\")\n\n\nclass TaskPanel extends Widget {\n    constructor(parent, cacheService) {\n        super(parent)\n        \n        this.id = 'tp-taskpanel'\n        this.cacheService = cacheService\n\n        // the appropriate DayButton on the calendar widget, which have the same date.\n        this.relatedDayButton \n\n        // Child widgets\n        this.Topbar = new Widget(this, {\n            id: 'tp-topbar',\n        })\n        this.DateLabel = new Widget(this.Topbar, {\n            id: 'tp-dateLabel',\n            innerText: 'Date label'\n        })\n        this.TaskList = new TaskList(this)\n        \n        this.CreateTaskBt = new IconButton24(this.Topbar, {\n            id: 'tp-createTaskBt',\n            onclick: this.TaskList.openTaskAdder.bind(this.TaskList)\n            }, svgPaths.addTask)\n\n    }\n   \n    get dailyTaskArray(){\n        if (this.relatedDayButton) {\n            let date = this.relatedDayButton.date\n            return this.cacheService.tasksArray.getDailyTasks(date)\n        } else {\n            return []\n        }\n    }\n\n    build() {\n        super.build()\n\n        this.Topbar.build()\n        this.DateLabel.build()\n        this.TaskList.build()\n    }\n\n    boundDayBt(dayButton) {\n        \n        this.relatedDayButton = dayButton\n        this.TaskList.update()\n        this.DateLabel.element.innerText = dayButton.date.toDateString()\n        if(!this.CreateTaskBt.isBuilded()) {\n            this.CreateTaskBt.build()\n        }\n    }\n\n}       \n\n\nclass TaskList extends Widget {\n    constructor(parent) {\n        super(parent)\n        this.parent = parent\n        this.id = 'tp-taskList'\n        this.cacheService = this.parent.cacheService\n        this.options = {innerText: 'No tasks'}\n        \n        this.taskItemArray = this.initTaskItems()\n    }\n\n    initTaskItems() {\n        let tasksToShow = this.taskArray\n        if(tasksToShow){\n            let itemsArray = []\n            for (let task of tasksToShow) {\n                let taskItem = new TaskItem(this, task)\n                itemsArray.push(taskItem)\n            }\n            return itemsArray \n        }\n    }\n\n    build() {\n        super.build()\n        this.makeListObserver()\n        this.buildTaskItems()\n\n    }\n\n    buildTaskItems() {\n        if(this.taskItemArray){\n            this.taskItemArray.forEach(taskItem => taskItem.build())\n        }\n    }\n\n    makeListObserver() {\n        // creates a MutationObserver object that keeps track of the number\n        // of tasks items in the TaskList div. If it becomes 0, the message “all tasks\n        // completed” will be displayed.\n        const itemsObserver = new MutationObserver((mutationsList, observer) => {\n            for (let mutation of mutationsList) { \n                if(!mutation.target.childElementCount) {\n                    mutation.target.style.fontSize = '18px'\n                } else {\n                    mutation.target.style.fontSize = '0px'\n                }\n                return\n            }\n        })\n        const observerConfig = {attributes: false, childList: true, subtree: false}\n        itemsObserver.observe(this.element, observerConfig)\n    }\n\n    clear() {\n        this.taskItemArray.forEach(taskItem => taskItem.remove())\n    }\n\n    update() {\n        this.clear()\n        this.taskItemArray = this.initTaskItems()\n        this.buildTaskItems()\n    }\n\n\n    openTaskAdder() {\n        let adder = new TaskAdder(this)\n        this.taskItemArray.push(adder)\n        adder.build()\n\n    }\n\n    get relatedDayButton() {\n        return this.parent.relatedDayButton\n    }\n\n    get taskArray() {\n        return this.parent.dailyTaskArray\n    }\n\n    get date() {\n        return this.parent.relatedDayButton.date\n    }\n\n}\n\n\nclass TaskItem extends Widget {\n    constructor(parent, taskObj) {\n        super(parent)\n\n        this.parent = parent\n        this.cacheService = this.parent.cacheService\n        this.taskObj = taskObj ? taskObj : this._emptyTaskObj\n        this.id = this.makeId('ti')\n        this.element.className = 'tp-taskitem'\n\n        // checkbox to mark the task as completed or vice versa\n        this.checkDone = new Widget(this, {\n            tagName: 'input',\n            className: 'tp-taskCheckout',\n            type: 'checkbox',\n            checked: this.taskObj.completion,\n            onclick: this.checkUncheckCompletion.bind(this)\n        }),\n        \n        // container for a divs that displays the title and description of\n        // the task or widgets for the user to edit the task\n        this.Main = new Widget(this, {\n            className: 'tp-taskitemMain'\n        })\n\n\n        // divs that displays task's title and description\n        this.defaultWidgets = [\n            this.Title = new Widget(this.Main, {\n                className: 'tp-taskitemTitle',\n                innerText: this.taskObj.title\n            }), \n            this.Description = new Widget(this.Main, {\n                className: 'tp-taskitemDescr',\n                innerText: this.taskObj.description,\n            }),\n                \n        ]\n\n        // widgets for editing task fields (user input)\n        this.editingWidgets = [\n\n            this.SaveCloseCont = new Widget(this.Main, {\n                className: 'tp-taskitemSaveClose',\n            }),\n                this.SaveButton = new IconButton24(this.SaveCloseCont, {\n                    className: 'save_task',\n                    onclick: this.saveInputValues.bind(this)\n                }, svgPaths.saveTask), \n                this.CloseEditorButton = new IconButton24(this.SaveCloseCont, {\n                    className: 'closeEditor',\n                    onclick: this.switchToDefaultMode.bind(this),\n                }, svgPaths.closeEditor),\n        \n            this.TaskTimeSettingsCont = new Widget(this.Main, {\n                className: 'tp-taskTimeSettings'\n            }),           \n                this.DateSettings = new TaskSettingsElement(this.TaskTimeSettingsCont,\n                    'date', this.taskObj, 'Postpone:'),                    \n                this.IntervalSettings = new TaskSettingsElement(this.TaskTimeSettingsCont,\n                    'interval', this.taskObj, 'Repeat:'),                    \n                this.AutoshiftSettings = new TaskSettingsElement(this.TaskTimeSettingsCont,\n                    'autoshift', this.taskObj, 'Auto postpone:'),\n        \n            this.InputTitle = new TaskSettingsElement(this.Main, 'input', this.taskObj, \n                'Task name:'),\n        \n            this.InputDescription = new TaskSettingsElement(this.Main, 'textarea', this.taskObj,\n                'Description:')\n        ]\n        \n        // buttons 'edit task(switch to editor mode)' and 'delete task'\n        // (located outside the task item's Main container)\n        this.RightButtons = [\n            this.RightButtonsCont = new Widget(this, {\n                className: 'tp-taskitemRightBtns'\n            }),\n                this.EditTaskButton = new IconButton24(this.RightButtonsCont, {\n                    className: 'button-icon24',\n                    onclick: this.switchToEditMode.bind(this)\n                }, svgPaths.editTask),\n                this.DeleteTaskButton = new IconButton24(this.RightButtonsCont, {\n                    className: 'button-icon24',\n                    onclick: this.removeSelf.bind(this)\n                }, svgPaths.deleteTask)\n        ]\n    }\n\n    build() {\n        super.build()\n        this.checkDone.build()\n        this.Main.build()\n        this.RightButtons.forEach(wg => wg.build())\n        \n        this.SaveButton.addCssClass('ti-SaveTaskBt')\n        this.CloseEditorButton.addCssClass('ti-CloseEditorBt')\n        this.DeleteTaskButton.addCssClass('tp-RightBtnsDelTask')\n        this.EditTaskButton.addCssClass('tp-RightBtnsEditTask')\n        \n        this.defaultWidgets.forEach(wg => wg.build())\n    }\n\n    switchToEditMode() {\n        // hides a task's title and description divs and shows the widgets\n        // for editing a task fields and options\n\n        this.checkDone.hide()\n        this.RightButtonsCont.hide()\n        this.defaultWidgets.forEach(wg => wg.hide())\n        this.editingWidgets.forEach(wg => {\n            if(!wg.isBuilded()) {\n                wg.build()\n            } else {\n                wg.show()\n            }\n        })\n        this.makeConstraints()\n    }\n\n    switchToDefaultMode() {\n        // hides a task's title and description divs and shows the widgets for\n        // editing a task fields and options\n\n        this.checkDone.show()\n        this.defaultWidgets.forEach(wg => wg.show())\n        this.editingWidgets.forEach(wg => wg.hide())\n        this.RightButtonsCont.show()\n    }\n\n    removeSelf() {\n        // remove the task-item widget from the TaskList widget and delete\n        // related entry about the task in the database\n        this.cacheService.deleteTask(this.taskObj)\n            .then(() => {\n                this.remove()\n                // if the task have interval repeat and we need to refresh\n                // all of DayButtons on calendar widget to deleted repeats \n                // that shouldn't exist anymore\n                if(this.taskObj.interval) {\n                    calendar.refreshMonth()\n                } else {\n                    this.relatedDayButton.updStatus()\n                }\n            })\n            .catch(err => {\n                throw err\n            })\n    }\n\n    takeInputValues() {\n        // returns the values of user input from a task editing widgets\n\n        return {\n            init_date: this.DateSettings.value + ' 00:00:00',\n            date: this.DateSettings.value + ' 00:00:00',\n            interval: this.IntervalSettings.value,\n            autoshift: this.AutoshiftSettings.value,\n            title: this.InputTitle.value,\n            description: this.InputDescription.value\n        }\n    }\n\n    updateFields(newTaskFields) {\n        // Updates the text of the divs, that displaying a task's\n        // title and description\n\n        this.Title.element.innerText = newTaskFields.title\n        this.Description.element.innerText = newTaskFields.description\n    }\n\n    makeConstraints() {\n        // To avoid conflicting states, in a task editing mode:\n        //     1) disables the widgets for date changing and \"auto-postpone until\n        // completion\" when chosen one of a task's interval repeating options;\n        //     2) disables the date changing and 'auto-postpone until completion' \n        // widgets when a task marked as completed in the task settings;\n        //     3) disables the interval choosing widget when 'postpone until \n        // completion' option is active;  \n\n        const dateInput = this.DateSettings.inputWidget\n        const intervalInput = this.IntervalSettings.inputWidget\n        const autoshiftInput = this.AutoshiftSettings.inputWidget\n        const checkDone = this.checkDone.element\n\n        if(intervalInput.value != 'no' || checkDone.checked) {\n            dateInput.disable()\n            autoshiftInput.disable()\n        } else if(!checkDone.checked) {\n            dateInput.enable()\n            autoshiftInput.enable()\n        }\n        intervalInput.element.addEventListener('change', event => {\n            if(event.target.value != 'no' && !checkDone.checked) {\n                dateInput.disable()\n                autoshiftInput.disable()\n            } else if (!checkDone.checked) {\n                dateInput.enable()\n                autoshiftInput.enable()\n            }\n        })\n\n        if(autoshiftInput.value != 'no') {\n            intervalInput.disable()\n        }\n        autoshiftInput.element.addEventListener('change', event => {\n            if(event.target.value != 'no') {\n                intervalInput.disable()\n            } else {\n                intervalInput.enable()\n            }\n        })\n    }\n\n    saveInputValues() {\n        // takes the user's input from the task editing widgets and push it\n        // on the server via cacheService.edit Task() method. If server succeed,\n        // updates appearance the application appropriately\n\n        let newTaskFields = this.takeInputValues()\n        newTaskFields.ID = this.taskObj.ID\n                          \n        this.cacheService.editTask(newTaskFields)\n            .then(() => {\n                calendar.updDayButtonsStatus()\n                taskPanel.TaskList.update()                    \n            })\n            .catch(err => {\n                console.error(err)\n            })\n    }\n\n    checkUncheckCompletion() {\n        // sends user input from checkDone checkbox (which indicates whether\n        // a task marked as completed or not) to the server. If server\n        // responds with succeed, the appearance of the application will\n        // appropriately updated\n\n        let checkObject = {\n                ID: this.taskObj.ID,\n                date: this.taskObj.date,\n        }\n\n        if(this.checkDone.element.checked) {\n            checkObject.completion = this.taskObj.date\n        } else {\n            checkObject.completion = false\n        }\n        this.cacheService.checkUncheckTask(checkObject)\n            .then(() => {\n                this.relatedDayButton.updStatus()\n            })\n            //TODO: error catching\n\n    }\n\n    get relatedDayButton() {\n        return this.parent.relatedDayButton\n    }\n\n    get _emptyTaskObj() {\n        console.log(this.parent)\n        return TaskObject.getEmpty({\n            date: this.parent.date,\n            init_date: this.parent.date,\n        })\n    }\n\n}\n\n\nclass TaskAdder extends TaskItem {\n    constructor(parent) {\n        super(parent)\n        this.id = this.makeId('ta')\n    }\n\n    build(){\n        super.build()\n        this.switchToEditMode()\n        this.reBind()\n        this.element.style.order = '-1'\n    }\n\n    reBind() {\n        this.CloseEditorButton.element.onclick = this.remove.bind(this)\n        this.SaveButton.element.onclick = this.createNewTask.bind(this)\n    }\n\n    createNewTask() {\n        let newTask = this.takeInputValues()\n        newTask.ID = this.taskObj.ID\n\n        let thereIsInterval\n        if(newTask.interval && newTask.interval != 'no'){\n            thereIsInterval = true\n        } else {\n            thereIsInterval = false\n        }\n                          \n        this.cacheService.createTask(newTask)\n            .then(() => {\n                this.remove()\n                calendar.updDayButtonsStatus()\n                taskPanel.TaskList.update()\n                if(thereIsInterval){\n                    calendar.refreshMonth()\n                }                  \n            })\n            .catch(err => {\n                console.error(err)\n            })\n    }\n}\n\n\nclass TaskSettingsElement extends Widget {\n    constructor(parent, inputType, taskObj, labelText) {\n        super(parent)\n        this.parent = parent\n        this.element.className = 'tp-SettingsElement'\n        this.taskObj = taskObj\n\n        this.inputWidget = this.initInputWg(inputType)\n        this.label = new Widget(this, {tagName: 'label', innerText: labelText})\n    }\n\n    build() {\n        super.build()\n        this.label.build()\n        this.inputWidget.build()\n    }\n\n    get value() {\n        return this.inputWidget.value\n    }\n\n    set value(defaultValue) {\n        this.inputWidget.value = defaultValue\n    }\n\n    initInputWg(type) {\n        if (type === 'date'){\n            return new Widget(this, {\n                tagName: 'input',\n                type: 'date',\n                name: 'new_date',\n                value: this.taskObj.init_date.toISOString().slice(0,10)\n            })\n        } else if (type === 'interval'){\n            const inputWg = new Select(this, [\n                ['no', 'no interval'],\n                ['every_day', 'every day'],\n                ['every_workday', 'every workday'],\n                ['every_week', 'every week'],\n                ['every_month', 'every month'],\n                ['every_year', 'every year']\n            ])\n            inputWg.defaultValue = this.taskObj.interval\n            return inputWg\n        } else if (type === 'autoshift') {\n            const inputWg = new Select(this, [\n                ['no', 'no'],\n                ['yes', 'until completed']\n            ])\n            inputWg.defaultValue = this.taskObj.autoshift\n            return inputWg\n        } else if (type === 'input'){\n            const inputWg = new Widget(this, {\n                tagName: 'input',\n                type: 'text', \n                name: 'new_title',\n                maxlength: \"80\",\n                minlength: \"1\",\n                value: this.taskObj.title  \n            })\n            return inputWg\n        } else if (type === 'textarea') {\n            return new Widget(this, {\n                tagName: 'textarea',\n                name: 'newDescription',\n                rows: '5',\n                cols: '3',\n                value: this.taskObj.description\n            })\n        }\n    }\n\n    get value() {\n        return this.inputWidget.element.value\n    }\n\n    set value(newValue) {\n        this.inputWidget.element.value = newValue\n    }\n\n    get cacheService() {\n        return this.parent.cacheService\n    }\n\n}\n\n\nclass Select extends Widget {\n    //  Constructor of the Widget takes two args: parent Widget and optionList.\n    //  OptionsList arg should be represented as an array of arrays. \n    //  Each nested array must consists of two items: \n    //  1) value attr of html <option> element;\n    //  2) inner text of <option>.\n    constructor(parent, optionsList) {\n        super(parent)\n        this.tag = 'select'\n        this.element = document.createElement(this.tag)\n        this.optionsList = this.initOptions(optionsList)\n        this.defaultValue\n    }\n\n    get value(){\n        return this.element.value\n    }\n\n    set value(newValue){\n        this.element.value = newValue\n    }\n\n    initOptions(optionsList) {\n        let optionWidgets = []\n        optionsList.forEach(pair => {\n            let value = pair[0]\n            let text = pair[1]\n            const optionWidget = new Widget(this, {\n                tagName: 'option',\n                value: value,\n                text: text\n            })\n            optionWidgets.push(optionWidget)\n        })\n        return optionWidgets\n    }\n\n    build(){\n        super.build()\n        this.optionsList.forEach(opt => opt.build())\n        \n        if(this.defaultValue) {\n            this.value = this.defaultValue\n        }\n    }\n}\n\n\nmodule.exports = {TaskPanel}\n\n\n//# sourceURL=webpack:///./widget.taskpanel.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./index.js");
/******/ 	
/******/ })()
;